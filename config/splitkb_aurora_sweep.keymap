/* 
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define COLEMAKDH 0
#define NAV 1
#define SYM 2
#define NUM 3

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";
    };

    behaviors {
        sbrack: shift_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT BRACKET";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sbrace: shift_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT BRACE";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACE>,
                <&kp RIGHT_BRACE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        spar: shift_parenthesis {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT PARENTHESIS";
            #binding-cells = <0>;
            bindings =
                <&kp LPAR>,
                <&kp RPAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NAV SYM>;
            then-layer = <NUM>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F  &kp P      &kp B            &kp J  &kp L      &kp U       &kp Y  &kp SINGLE_QUOTE
&kp A  &kp R  &kp S  &kp T      &kp G            &kp M  &kp N      &kp E       &kp I             &kp O
&kp Z  &kp X  &kp C  &kp D      &kp V            &kp K  &kp H  &kp COMMA  &kp PERIOD          &kp SEMI
                     &mo 1  &kp SPACE  &kp RIGHT_SHIFT  &mo 2
            >;
        };

        nav {
            bindings = <
        &trans       &kp LG(TAB)       &kp ESC           &kp TAB       &kp K_VOL_UP  &kp C_RESET  &kp ENTER  &kp BACKSPACE  &trans     &trans
&kp LEFT_SHIFT  &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LEFT_COMMAND  &kp K_VOLUME_DOWN       &trans   &kp LEFT       &kp DOWN  &kp UP  &kp RIGHT
        &trans            &trans        &trans            &trans   &kp C_PLAY_PAUSE       &trans   &kp HOME         &trans  &trans     &trans
                                                          &trans             &trans       &trans     &trans
            >;
        };

        sym {
            bindings = <
  &kp ESC       &sbrace    &sbrack      &spar    &kp TILDE  &kp CARET          &kp ENTER  &kp BACKSPACE  &kp RIGHT_BRACKET        &kp GRAVE
&kp MINUS  &kp ASTERISK  &kp EQUAL  &kp UNDER   &kp DOLLAR   &kp HASH  &sk RIGHT_COMMAND  &sk RIGHT_ALT          &sk RCTRL  &kp RIGHT_SHIFT
 &kp PLUS      &kp PIPE     &kp AT  &kp SLASH  &kp PERCENT     &trans      &kp BACKSLASH  &kp AMPERSAND       &kp QUESTION  &kp EXCLAMATION
                                       &trans       &trans     &trans             &trans
            >;
        };

        num {
            bindings = <
  &kp NUMBER_7  &kp NUMBER_5  &kp NUMBER_3      &kp NUMBER_1  &kp NUMBER_9  &kp NUMBER_8       &kp NUMBER_0   &kp NUMBER_2       &kp NUMBER_4   &kp NUMBER_6
&kp LEFT_SHIFT     &sk LCTRL  &sk LEFT_ALT  &sk LEFT_COMMAND       &kp F11       &kp F10  &sk RIGHT_COMMAND  &sk RIGHT_ALT  &sk RIGHT_CONTROL  &kp BACKSPACE
        &kp F7        &kp F5        &kp F3            &kp F1        &kp F9        &kp F8            &kp F12         &kp F2             &kp F4         &kp F6
                                                      &trans        &trans        &trans             &trans
            >;
        };
    };
};
